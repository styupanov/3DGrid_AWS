import {
  Viewer,
  Cartesian3,
  Cartographic,
  Cesium3DTileset,
  ScreenSpaceEventHandler,
  ScreenSpaceEventType,
  Color,
  OpenStreetMapImageryProvider,
  Ion,
  createOsmBuildingsAsync
} from 'cesium'
import { useState, useEffect, useRef } from 'react'
import UI from './UI'
import {Divider} from 'antd';
import {flyToFeature, getLevelConfig} from '@/components/utils';
import coords from '../successful_routes_start_fin_coords.json';
import data from '../successful_routes_formated.json';
const starts = data.map(item => item.start_finish[0])
const finishes = data.map(item => item.start_finish[1])
const coordsMap = {};
coords.forEach(item => {
  coordsMap[item.Cell_id] = { lat: item.lat, lon: item.lon };
});

const start_cell_filter = "${cell_id} === '6138958021999874235301999678398091999988749540' || ${cell_id} === '6138958021999874235301999678513561999988749540' || ${cell_id} === '6138958021999874177571999678571301999988691811' || ${cell_id} === '6138958021999874119831999678629031999988749540' || ${cell_id} === '6138958021999874119831999678744501999988749540' || ${cell_id} === '6138958021999874062101999678802241999988691811' || ${cell_id} === '6138958021999874004361999678859971999988749540' || ${cell_id} === '6138958021999873946631999678917711999988691811' || ${cell_id} === '6138958021999873888891999678975441999988749540' || ${cell_id} === '6138958021999873831161999679033181999988691811' || ${cell_id} === '6138958021999873773421999679090911999988749540' || ${cell_id} === '6138958021999873657951999679090911999988749540' || ${cell_id} === '6138958021999873657951999679206381999988749540' || ${cell_id} === '6138958021999873542481999679206381999988749540' || ${cell_id} === '6138958021999873484751999679264121999988691811' || ${cell_id} === '6138958021999873427011999679321851999988749540' || ${cell_id} === '6138958021999873369281999679379591999988691811' || ${cell_id} === '6138958021999873253811999679379591999988691811' || ${cell_id} === '6138958021999873196071999679321851999988749540' || ${cell_id} === '6138958021999873138341999679264121999988691811' || ${cell_id} === '6138958021999873022871999679264121999988691811' || ${cell_id} === '6138958021999872965131999679206381999988749540' || ${cell_id} === '6138958021999872907401999679148651999988691811' || ${cell_id} === '6138958021999872849661999679090911999988749540' || ${cell_id} === '6138958021999872734191999679090911999988749540' || ${cell_id} === '6138958021999872618721999679090911999988749540' || ${cell_id} === '6138958021999872503251999679090911999988749540' || ${cell_id} === '6138958021999872387781999679090911999988749540' || ${cell_id} === '6138958021999872272311999679090911999988749540' || ${cell_id} === '6138958021999872156841999679090911999988749540' || ${cell_id} === '6138958021999872041371999679090911999988749540' || ${cell_id} === '6138958021999871925901999679090911999988749540' || ${cell_id} === '6138958021999871810431999679090911999988749540' || ${cell_id} === '6138958021999871752701999679033181999988691811' || ${cell_id} === '6138958021999871637231999679033181999988691811' || ${cell_id} === '6138958021999871579491999678975441999988634070' || ${cell_id} === '6138958021999871464021999678975441999988634070' || ${cell_id} === '6138958021999871406291999679033181999988576341' || ${cell_id} === '6138958021999871290821999679033181999988576341' || ${cell_id} === '6138958021999871233081999678975441999988634070' || ${cell_id} === '6138958021999871175351999678917711999988691811' || ${cell_id} === '6138958021999871059881999678917711999988691811' || ${cell_id} === '6138958021999870944411999678917711999988691811' || ${cell_id} === '6138958021999870886671999678859971999988749540' || ${cell_id} === '6138958021999870828941999678802241999988691811' || ${cell_id} === '6138958021999870771201999678744501999988749540' || ${cell_id} === '6138958021999870655731999678744501999988749540' || ${cell_id} === '6138958021999870540261999678744501999988749540' || ${cell_id} === '6138958021999870482531999678686771999988691811' || ${cell_id} === '6138958021999870367061999678686771999988691811' || ${cell_id} === '6138958021999870309321999678629031999988749540' || ${cell_id} === '6138958021999870251591999678571301999988691811' || ${cell_id} === '6138958021999870136121999678571301999988691811' || ${cell_id} === '6138958021999870020651999678571301999988691811' || ${cell_id} === '6138958021999869962911999678513561999988749540' || ${cell_id} === '6138958021999869847441999678513561999988749540' || ${cell_id} === '6138958021999869789711999678455831999988691811' || ${cell_id} === '6138958021999869731971999678398091999988749540' || ${cell_id} === '6138958021999869674241999678340361999988691811' || ${cell_id} === '6138958021999869558771999678340361999988691811' || ${cell_id} === '6138958021999869501031999678282621999988749540' || ${cell_id} === '6138958021999869385561999678282621999988749540' || ${cell_id} === '6138958021999869327831999678224891999988691811' || ${cell_id} === '6138958021999869270091999678167151999988634070' || ${cell_id} === '6138958021999869154621999678167151999988634070' || ${cell_id} === '6138958021999869096891999678109421999988691811' || ${cell_id} === '6138958021999868981421999678109421999988691811' || ${cell_id} === '6138958021999868923681999678051681999988749540' || ${cell_id} === '6138958021999868808211999678051681999988749540' || ${cell_id} === '6138958021999868750481999677993951999988691811' || ${cell_id} === '6138958021999868692741999677936211999988634070' || ${cell_id} === '6138958021999868577271999677936211999988634070' || ${cell_id} === '6138958021999868519541999677878481999988691811' || ${cell_id} === '6138958021999868404071999677878481999988691811' || ${cell_id} === '6138958021999868346331999677820741999988749540' || ${cell_id} === '6138958021999868230861999677820741999988749540' || ${cell_id} === '6138958021999868115391999677820741999988749540' || ${cell_id} === '6138958021999868057661999677763011999988691811' || ${cell_id} === '6138958021999867999921999677705271999988749540' || ${cell_id} === '6138958021999867884451999677705271999988749540' || ${cell_id} === '6138958021999867768981999677705271999988749540' || ${cell_id} === '6138958021999867711251999677647541999988691811' || ${cell_id} === '6138958021999867653511999677589801999988749540' || ${cell_id} === '6138958021999867538041999677589801999988749540' || ${cell_id} === '6138958021999867480311999677532071999988691811' || ${cell_id} === '6138958021999867422571999677474331999988749540' || ${cell_id} === '6138958021999867307101999677474331999988749540' || ${cell_id} === '6138958021999867249361999677416601999988691811' || ${cell_id} === '6138958021999867133891999677416601999988691811' || ${cell_id} === '6138958021999867076161999677358861999988634070' || ${cell_id} === '6138958021999867076161999677243391999988634070' || ${cell_id} === '6138958021999866960691999677243391999988634070' || ${cell_id} === '6138958021999866902951999677185661999988576341' || ${cell_id} === '6138958021999866845221999677127921999988634070' || ${cell_id} === '6138958021999866729751999677127921999988634070' || ${cell_id} === '6138958021999866672011999677070191999988691811' || ${cell_id} === '6138958021999866556541999677070191999988691811' || ${cell_id} === '6138958021999866498811999677012451999988749540' || ${cell_id} === '6138958021999866498811999676896981999988749540' || ${cell_id} === '6138958021999866441071999676839251999988691811' || ${cell_id} === '6138958021999866383341999676781511999988749540' || ${cell_id} === '6138958021999866325601999676723781999988691811' || ${cell_id} === '6138958021999866267871999676666041999988749540' || ${cell_id} === '6138958021999866152401999676666041999988749540' || ${cell_id} === '6138958021999866036931999676666041999988749540' || ${cell_id} === '6138958021999865979191999676608311999988691811' || ${cell_id} === '6138958021999865921461999676550571999988634070' || ${cell_id} === '6138958021999865863721999676492841999988691811' || ${cell_id} === '6138958021999865805991999676435101999988749540' || ${cell_id} === '6138958021999865748251999676377371999988691811' || ${cell_id} === '6138958021999865690521999676319631999988749540' || ${cell_id} === '6138958021999865575051999676319631999988749540' || ${cell_id} === '6138958021999865459581999676319631999988749540' || ${cell_id} === '6138958021999865401841999676261901999988691811' || ${cell_id} === '6138958021999865344111999676204161999988749540' || ${cell_id} === '6138958021999865228641999676204161999988749540' || ${cell_id} === '6138958021999865170901999676146431999988691811' || ${cell_id} === '6138958021999865055431999676146431999988691811' || ${cell_id} === '6138958021999864997701999676088691999988634070' || ${cell_id} === '6138958021999864882231999676088691999988634070' || ${cell_id} === '6138958021999864824491999676030961999988576341' || ${cell_id} === '6138958021999864766761999675973221999988634070' || ${cell_id} === '6138958021999864709021999675915491999988576341' || ${cell_id} === '6138958021999864709021999675800021999988576341' || ${cell_id} === '6138958021999864651291999675742281999988634070' || ${cell_id} === '6138958021999864535821999675742281999988634070' || ${cell_id} === '6138958021999864478081999675684551999988691811' || ${cell_id} === '6138958021999864420351999675626811999988749540' || ${cell_id} === '6138958021999864420351999675511341999988749540' || ${cell_id} === '6138958021999864362611999675453611999988691811' || ${cell_id} === '6138958021999864304881999675395871999988749540' || ${cell_id} === '6138958021999864247141999675338141999988691811' || ${cell_id} === '6138958021999864189411999675280401999988749540' || ${cell_id} === '6138958021999864189411999675164931999988749540' || ${cell_id} === '6138958021999864131671999675107201999988691811' || ${cell_id} === '6138958021999864073941999675049461999988749540' || ${cell_id} === '6138958021999864016201999674991731999988691811' || ${cell_id} === '6138958021999863958471999674933991999988749540' || ${cell_id} === '6138958021999863900731999674876261999988691811' || ${cell_id} === '6138958021999863785261999674876261999988691811' || ${cell_id} === '6138958021999863669791999674876261999988691811' || ${cell_id} === '6138958021999863612061999674818521999988749540' || ${cell_id} === '6138958021999863496591999674818521999988749540' || ${cell_id} === '6138958021999863381121999674818521999988749540' || ${cell_id} === '6138958021999863323381999674760791999988691811' || ${cell_id} === '6138958021999863265651999674703051999988749540' || ${cell_id} === '6138958021999863207911999674645321999988691811' || ${cell_id} === '6138958021999863150181999674587581999988634070' || ${cell_id} === '6138958021999863092441999674529851999988576341' || ${cell_id} === '6138958021999863034711999674472111999988634070' || ${cell_id} === '6138958021999862976971999674414371999988691811' || ${cell_id} === '6138958021999862919241999674356641999988749540' || ${cell_id} === '6138958021999862803771999674356641999988749540' || ${cell_id} === '6138958021999862746031999674298901999988691811' || ${cell_id} === '6138958021999862688301999674241171999988749540' || ${cell_id} === '6138958021999862572831999674241171999988749540' || ${cell_id} === '6138958021999862515091999674183431999988691811' || ${cell_id} === '6138958021999862457361999674125701999988749540' || ${cell_id} === '6138958021999862341891999674125701999988749540' || ${cell_id} === '6138958021999862284151999674067961999988691811' || ${cell_id} === '6138958021999862226421999674010231999988749540' || ${cell_id} === '6138958021999862168681999673952491999988691811' || ${cell_id} === '6138958021999862110951999673894761999988749540' || ${cell_id} === '6138958021999861995481999673894761999988749540' || ${cell_id} === '6138958021999861880011999673894761999988749540' || ${cell_id} === '6138958021999861822271999673837021999988691811' || ${cell_id} === '6138958021999861706801999673837021999988691811' || ${cell_id} === '6138958021999861649071999673779291999988749540' || ${cell_id} === '6138958021999861533601999673779291999988749540' || ${cell_id} === '6138958021999861418131999673779291999988749540' || ${cell_id} === '6138958021999861302661999673779291999988749540' || ${cell_id} === '6138958021999861187191999673779291999988749540' || ${cell_id} === '6138958021999861129451999673721551999988691811' || ${cell_id} === '6138958021999861013981999673721551999988691811' || ${cell_id} === '6138958021999860898511999673721551999988691811' || ${cell_id} === '6138958021999860783041999673721551999988691811' || ${cell_id} === '6138958021999860725311999673663821999988749540' || ${cell_id} === '6138958021999860609841999673663821999988749540' || ${cell_id} === '6138958021999860494371999673663821999988749540' || ${cell_id} === '6138958021999860436631999673606081999988691811' || ${cell_id} === '6138958021999860436631999673490611999988691811' || ${cell_id} === '6138958021999860378901999673432881999988749540' || ${cell_id} === '6138958021999860263431999673432881999988749540' || ${cell_id} === '6138958021999860263431999673317411999988749540' || ${cell_id} === '6138958021999860263431999673201941999988749540' || ${cell_id} === '6138958021999860147961999673201941999988749540' || ${cell_id} === '6138958021999860147961999673086471999988749540' || ${cell_id} === '6138958021999860090221999673028731999988691811' || ${cell_id} === '6138958021999860090221999672913261999988691811' || ${cell_id} === '6138958021999860032491999672855531999988749540' || ${cell_id} === '6138958021999860032491999672740061999988749540' || ${cell_id} === '6138958021999860032491999672624591999988749540' || ${cell_id} === '6138958021999860032491999672509121999988749540' || ${cell_id} === '6138958021999860032491999672393651999988749540' || ${cell_id} === '6138958021999859974751999672335911999988691811' || ${cell_id} === '6138958021999859974751999672220441999988691811' || ${cell_id} === '6138958021999859917021999672162711999988749540' || ${cell_id} === '6138958021999859917021999672047241999988749540' || ${cell_id} === '6138958021999859917021999671931771999988749540' || ${cell_id} === '6138958021999859917021999671816301999988749540' || ${cell_id} === '6138958021999786478061999615697851999988518600' || ${cell_id} === '6138958021999853219751999681515781999988518600' || ${cell_id} === '6138958021999717542441999499881391999988518600' || ${cell_id} === '6138958021999717600181999514719291999988576341' || ${cell_id} === '6138958021999872791931999692427701999988691811' || ${cell_id} === '6138958021999819444761999658364041999988691811' || ${cell_id} === '6138958021999760728241999559117531999988749540' || ${cell_id} === '6138958021999747911061999529557191999988749540' || ${cell_id} === '6138958021999750971021999553632701999988691811' || ${cell_id} === '6138958021999837919971999635500971999988691811' || ${cell_id} === '6138958021999874639451999696353691999988691811' || ${cell_id} === '6138958021999789826691999604266321999988749540' || ${cell_id} === '6138958021999725625341999523899161999988518600' || ${cell_id} === '6138958021999868230861999703801501999988634070' || ${cell_id} === '6138958021999784399601999600109401999988749540' || ${cell_id} === '6138958021999776547641999525400271999988518600' || ${cell_id} === '6138958021999876717911999723604621999988691811' || ${cell_id} === '6138958021999723777821999525631211999988749540' || ${cell_id} === '6138958021999845483261999665234511999988518600' || ${cell_id} === '6138958021999844328561999663271511999988518600' || ${cell_id} === '6138958021999807435881999634577211999988691811' || ${cell_id} === '6138958021999826777111999661654931999988518600' || ${cell_id} === '6138958021999713500991999524361041999988518600' || ${cell_id} === '6138958021999769734901999508195231999988749540' || ${cell_id} === '6138958021999853508431999672913261999988576341' || ${cell_id} === '6138958021999768176061999587119011999988576341' || ${cell_id} === '6138958021999777529131999587119011999988576341' || ${cell_id} === '6138958021999724817051999513737801999988518600' || ${cell_id} === '6138958021999729435861999497110111999988749540' || ${cell_id} === '6138958021999874350771999678398091999988518600' || ${cell_id} === '6138958021999863785261999691850351999988576341' || ${cell_id} === '6138958021999836476601999607384011999988749540' || ${cell_id} === '6138958021999827816341999666966561999988518600' || ${cell_id} === '6138958021999746987301999554036841999988749540' || ${cell_id} === '6138958021999807493611999619508361999988518600' || ${cell_id} === '6138958021999806107971999626436571999988749540' || ${cell_id} === '6138958021999823370741999633422511999988691811' || ${cell_id} === '6138958021999794387761999578227821999988691811' || ${cell_id} === '6138958021999877814871999696526891999988749540' || ${cell_id} === '6138958021999850679411999661193051999988518600' || ${cell_id} === '6138958021999833936251999651493571999988518600' || ${cell_id} === '6138958021999779376651999610559441999988691811' || ${cell_id} === '6138958021999830645361999645431391999988576341' || ${cell_id} === '6138958021999763672731999496244081999988691811' || ${cell_id} === '6138958021999801489171999574936921999988749540' || ${cell_id} === '6138958021999732899961999512236681999988518600' || ${cell_id} === '6138958021999704725261999502883611999988749540' || ${cell_id} === '6138958021999809110191999625166401999988749540' || ${cell_id} === '6138958021999738327051999481752591999988749540' || ${cell_id} === '6138958021999834051721999620085711999988634070' || ${cell_id} === '6138958021999719389961999521127881999988634070' || ${cell_id} === '6138958021999732669021999492144901999988518600' || ${cell_id} === '6138958021999736941411999535215231999988518600' || ${cell_id} === '6138958021999775970291999603804441999988749540' || ${cell_id} === '6138958021999822851131999669160491999988749540' || ${cell_id} === '6138958021999736133121999482907291999988749540' || ${cell_id} === '6138958021999752356661999499708181999988576341' || ${cell_id} === '6138958021999854663131999686538731999988691811' || ${cell_id} === '6138958021999753395891999505250751999988576341' || ${cell_id} === '6138958021999780704561999518472071999988634070' || ${cell_id} === '6138958021999756282641999488738531999988576341' || ${cell_id} === '6138958021999777991011999607557211999988576341' || ${cell_id} === '6138958021999843520271999634519471999988518600' || ${cell_id} === '6138958021999768868881999531116041999988576341' || ${cell_id} === '6138958021999860147961999674010231999988749540' || ${cell_id} === '6138958021999719736371999522513521999988749540' || ${cell_id} === '6138958021999774815591999582788891999988749540' || ${cell_id} === '6138958021999836707541999678398091999988749540' || ${cell_id} === '6138958021999853623901999660211561999988691811' || ${cell_id} === '6138958021999716387741999515354381999988749540' || ${cell_id} === '6138958021999771178281999528575701999988576341' || ${cell_id} === '6138958021999758187901999516855491999988634070' || ${cell_id} === '6138958021999779838531999505712631999988691811' || ${cell_id} === '6138958021999874639451999680880701999988576341' || ${cell_id} === '6138958021999822158311999669045021999988749540' || ${cell_id} === '6138958021999771236021999555422481999988749540' || ${cell_id} === '6138958021999712173081999521416551999988691811' || ${cell_id} === '6138958021999736364061999530134541999988518600' || ${cell_id} === '6138958021999724528381999514950231999988576341' || ${cell_id} === '6138958021999851776381999672335911999988691811' || ${cell_id} === '6138958021999750682351999523899161999988749540' || ${cell_id} === '6138958021999834917751999636078321999988691811' || ${cell_id} === '6138958021999814421821999593989481999988518600' || ${cell_id} === '6138958021999810091691999646470621999988691811' || ${cell_id} === '6138958021999734747481999493415071999988518600' || ${cell_id} === '6138958021999776547641999505193011999988518600' || ${cell_id} === '6138958021999731918461999494858441999988691811' || ${cell_id} === '6138958021999842019161999669622371999988749540' || ${cell_id} === '6138958021999865575051999649876991999988518600' || ${cell_id} === '6138958021999865228641999662001341999988634070' || ${cell_id} === '6138958021999850044331999682497281999988691811' || ${cell_id} === '6138958021999757264141999549879921999988749540' || ${cell_id} === '6138958021999849582451999658364041999988576341' || ${cell_id} === '6138958021999825391471999663156041999988749540' || ${cell_id} === '6138958021999798025071999617314431999988518600' || ${cell_id} === '6138958021999804318191999564717821999988807281' || ${cell_id} === '6138958021999815056901999655477291999988691811' || ${cell_id} === '6138958021999719851841999530019071999988634070' || ${cell_id} === '6138958021999818232331999608538711999988749540' || ${cell_id} === '6138958021999794560971999602072391999988749540' || ${cell_id} === '6138958021999821580961999665927331999988749540' || ${cell_id} === '6138958021999769099821999529383991999988576341' || ${cell_id} === '6138958021999745024311999562119751999988749540' || ${cell_id} === '6138958021999779549861999524822921999988518600' || ${cell_id} === '6138958021999777009521999602996151999988634070' || ${cell_id} === '6138958021999836765271999607557211999988576341' || ${cell_id} === '6138958021999789768961999616794821999988576341' || ${cell_id} === '6138958021999824525441999654322591999988691811' || ${cell_id} === '6138958021999803452161999572627521999988749540' || ${cell_id} === '6138958021999862630561999678571301999988691811' || ${cell_id} === '6138958021999850737151999657440281999988691811' || ${cell_id} === '6138958021999769850371999581518721999988518600' || ${cell_id} === '6138958021999761825211999514950231999988691811' || ${cell_id} === '6138958021999816096131999630766691999988691811' || ${cell_id} === '6138958021999837977711999679899201999988518600' || ${cell_id} === '6138958021999726780041999501036091999988518600' || ${cell_id} === '6138958021999723662351999518703011999988634070' || ${cell_id} === '6138958021999747102771999506809591999988749540' || ${cell_id} === '6138958021999818925151999665696391999988749540' || ${cell_id} === '6138958021999773660891999551381031999988634070' || ${cell_id} === '6138958021999729320391999532328471999988749540' || ${cell_id} === '6138958021999807493611999635674171999988518600' || ${cell_id} === '6138958021999752645341999504153781999988518600' || ${cell_id} === '6138958021999872734191999681977661999988634070' || ${cell_id} === '6138958021999748661621999477768871999988576341' || ${cell_id} === '6138958021999786997681999610905851999988576341' || ${cell_id} === '6138958021999872387781999687751171999988518600' || ${cell_id} === '6138958021999765866661999587580891999988576341' || ${cell_id} === '6138958021999777875541999612984311999988576341' || ${cell_id} === '6138958021999750220471999470551991999988634070' || ${cell_id} === '6138958021999761305591999486255921999988749540' || ${cell_id} === '6138958021999829317451999637637161999988749540' || ${cell_id} === '6138958021999762979911999516566811999988576341' || ${cell_id} === '6138958021999771871101999528229291999988691811' || ${cell_id} === '6138958021999810957711999622164181999988518600' || ${cell_id} === '6138958021999844155351999662636431999988691811' || ${cell_id} === '6138958021999764827431999541277401999988691811' || ${cell_id} === '6138958021999753222691999495955411999988518600' || ${cell_id} === '6138958021999753222691999563967271999988749540' || ${cell_id} === '6138958021999865113171999698489881999988518600' || ${cell_id} === '6138958021999849293771999671123481999988518600' || ${cell_id} === '6138958021999742483971999506925061999988518600' || ${cell_id} === '6138958021999847677191999659807411999988518600' || ${cell_id} === '6138958021999757264141999512467621999988518600' || ${cell_id} === '6138958021999839190141999674183431999988576341' || ${cell_id} === '6138958021999839478821999671700831999988518600' || ${cell_id} === '6138958021999797389981999634346271999988576341' || ${cell_id} === '6138958021999766790421999587696361999988691811' || ${cell_id} === '6138958021999866325601999698663091999988691811' || ${cell_id} === '6138958021999768580201999545492061999988518600' || ${cell_id} === '6138958021999775392941999595721531999988518600' || ${cell_id} === '6138958021999756744521999575572011999988576341' || ${cell_id} === '6138958021999864824491999689079071999988691811' || ${cell_id} === '6138958021999770889601999552304791999988518600' || ${cell_id} === '6138958021999792713451999573551281999989211420' || ${cell_id} === '6138958021999720775601999522051641999988518600' || ${cell_id} === '6138958021999863092441999636655671999988691811' || ${cell_id} === '6138958021999833936251999628284091999988749540' || ${cell_id} === '6138958021999867249361999698316681999988576341' || ${cell_id} === '6138958021999785034691999569798511999989153691' || ${cell_id} === '6138958021999833012491999609347001999988749540' || ${cell_id} === '6138958021999804029511999627013921999988749540' || ${cell_id} === '6138958021999860494371999680707491999988749540' || ${cell_id} === '6138958021999774584651999581518721999988518600' || ${cell_id} === '6138958021999750913291999500343271999988518600' || ${cell_id} === '6138958021999745255251999560041291999988749540' || ${cell_id} === '6138958021999722969531999513044971999988634070' || ${cell_id} === '6138958021999835264161999671527621999988691811' || ${cell_id} === '6138958021999804029511999628284091999988518600' || ${cell_id} === '6138958021999733823721999500112331999988518600' || ${cell_id} === '6138958021999708535781999501959851999988634070' || ${cell_id} === '6138958021999817308571999661423991999988749540' || ${cell_id} === '6138958021999769503961999582788891999988749540' || ${cell_id} === '6138958021999831049501999669968781999988518600' || ${cell_id} === '6138958021999708420311999502883611999988634070' || ${cell_id} === '6138958021999829432921999635327761999988634070' || ${cell_id} === '6138958021999754550591999549475781999988691811' || ${cell_id} === '6138958021999792251561999557270011999988980480' || ${cell_id} === '6138958021999767945121999549706721999988576341' || ${cell_id} === '6138958021999809398871999655592761999988576341' || ${cell_id} === '6138958021999762171621999509061261999988576341' || ${cell_id} === '6138958021999864420351999702184921999988518600' || ${cell_id} === '6138958021999805184211999629554261999988518600' || ${cell_id} === '6138958021999826199761999667890321999988518600' || ${cell_id} === '6138958021999764076871999553921371999988749540' || ${cell_id} === '6138958021999711307061999516624551999988749540' || ${cell_id} === '6138958021999756975461999490586051999988691811' || ${cell_id} === '6138958021999787575031999571184151999988807281' || ${cell_id} === '6138958021999861071721999680822961999988749540' || ${cell_id} === '6138958021999833358901999621817771999988518600' || ${cell_id} === '6138958021999753453631999566969491999988518600' || ${cell_id} === '6138958021999872503251999688443991999988634070' || ${cell_id} === '6138958021999749700851999505019811999988691811' || ${cell_id} === '6138958021999835668311999635905111999988749540' || ${cell_id} === '6138958021999877930341999725509871999988749540' || ${cell_id} === '6138958021999786709001999608076831999988518600' || ${cell_id} === '6138958021999740405511999483253701999988634070' || ${cell_id} === '6138958021999712981371999512756301999988576341' || ${cell_id} === '6138958021999866614281999664426221999988518600' || ${cell_id} === '6138958021999746525421999545838471999988749540' || ${cell_id} === '6138958021999791731951999626263361999988691811' || ${cell_id} === '6138958021999781974731999534868811999988749540' || ${cell_id} === '6138958021999842365571999672971001999988518600' || ${cell_id} === '6138958021999768926611999595144181999988749540' || ${cell_id} === '6138958021999742888121999489777761999988576341' || ${cell_id} === '6138958021999775046531999602649741999988518600' || ${cell_id} === '6138958021999861764541999692023561999988518600' || ${cell_id} === '6138958021999853162021999625916951999989500101' || ${cell_id} === '6138958021999859859281999670603861999988691811' || ${cell_id} === '6138958021999770081311999589601621999988518600' || ${cell_id} === '6138958021999714424751999523206341999988749540' || ${cell_id} === '6138958021999763672731999500862881999988576341' || ${cell_id} === '6138958021999755301151999506347711999988518600' || ${cell_id} === '6138958021999866383341999686481001999988518600' || ${cell_id} === '6138958021999719794111999522340311999988576341' || ${cell_id} === '6138958021999861591331999665176771999988576341' || ${cell_id} === '6138958021999822851131999668929551999988749540' || ${cell_id} === '6138958021999815691991999661770401999988518600' || ${cell_id} === '6138958021999851141291999661077581999988634070' || ${cell_id} === '6138958021999758072431999483715581999988518600' || ${cell_id} === '6138958021999761709741999510908781999988576341' || ${cell_id} === '6138958021999753511361999496821431999988691811' || ${cell_id} === '6138958021999707381081999503460961999988749540' || ${cell_id} === '6138958021999811477331999633884391999988691811' || ${cell_id} === '6138958021999817770451999645142721999988518600' || ${cell_id} === '6138958021999814537291999652070921999988634070' || ${cell_id} === '6138958021999758361101999580537221999988691811' || ${cell_id} === '6138958021999736133121999482099001999988518600' || ${cell_id} === '6138958021999841615011999627418061999988691811' || ${cell_id} === '6138958021999750105001999499188571999988634070' || ${cell_id} === '6138958021999781281911999611079051999988634070' || ${cell_id} === '6138958021999863265651999646528361999988518600' || ${cell_id} === '6138958021999762344821999551611971999988634070' || ${cell_id} === '6138958021999853566161999625628281999988634070' || ${cell_id} === '6138958021999764365551999589197481999988576341' || ${cell_id} === '6138958021999870771201999672047241999988518600' || ${cell_id} === '6138958021999828624631999634981351999988749540' || ${cell_id} === '6138958021999788902931999605305551999988749540' || ${cell_id} === '6138958021999863381121999695718601999988518600' || ${cell_id} === '6138958021999829086511999637175281999988749540' || ${cell_id} === '6138958021999847908131999641447671999988634070' || ${cell_id} === '6138958021999776663111999520435061999988749540' || ${cell_id} === '6138958021999739597221999550457271999988749540' || ${cell_id} === '6138958021999749065761999501613441999988749540' || ${cell_id} === '6138958021999729320391999524245571999988518600' || ${cell_id} === '6138958021999774931061999578862911999988749540' || ${cell_id} === '6138958021999752183461999504731131999988518600' || ${cell_id} === '6138958021999862861501999684344801999988691811' || ${cell_id} === '6138958021999814017671999615409181999988576341' || ${cell_id} === '6138958021999707381081999504731131999988634070' || ${cell_id} === '6138958021999756859991999510562371999988691811' || ${cell_id} === '6138958021999818809681999638445451999988634070' || ${cell_id} === '6138958021999869270091999696295951999988749540' || ${cell_id} === '6138958021999858531381999653225621999988518600' || ${cell_id} === '6138958021999760381831999516162671999988518600' || ${cell_id} === '6138958021999864593551999651551301999988691811' || ${cell_id} === '6138958021999797274511999635039091999988691811' || ${cell_id} === '6138958021999746467691999553286291999988576341' || ${cell_id} === '6138958021999722507651999506578651999988634070' || ${cell_id} === '6138958021999725740811999513275911999988518600' || ${cell_id} === '6138958021999747045041999554210051999988576341' || ${cell_id} === '6138958021999756686791999566392141999988749540' || ${cell_id} === '6138958021999775392941999602072391999988749540' || ${cell_id} === '6138958021999859512871999665407711999988576341' || ${cell_id} === '6138958021999801142761999630593491999988518600' || ${cell_id} === '6138958021999859686081999656920661999988634070' || ${cell_id} === '6138958021999818925151999634634941999988518600' || ${cell_id} === '6138958021999757033201999482214471999988749540' || ${cell_id} === '6138958021999742483971999511659331999988518600' || ${cell_id} === '6138958021999865170901999694044281999988576341' || ${cell_id} === '6138958021999858300441999673663821999988749540' || ${cell_id} === '6138958021999806627591999586079781999988691811' || ${cell_id} === '6138958021999833358901999644680841999988749540' || ${cell_id} === '6138958021999779087981999566507611999988518600' || ${cell_id} === '6138958021999756686791999481868061999988634070' || ${cell_id} === '6138958021999749008031999491047931999988576341' || ${cell_id} === '6138958021999760497301999583828121999988749540' || ${cell_id} === '6138958021999715002101999505770361999988518600' || ${cell_id} === '6138958021999821869631999648549081999988576341' || ${cell_id} === '6138958021999719851841999495031651999988749540' || ${cell_id} === '6138958021999795253791999620894011999988518600' || ${cell_id} === '6138958021999758072431999549648981999988749540' || ${cell_id} === '6138958021999739539491999489431351999988691811' || ${cell_id} === '6138958021999748026531999467318831999988518600' || ${cell_id} === '6138958021999780069471999543933211999988576341' || ${cell_id} === '6138958021999752876281999569971711999988749540' || ${cell_id} === '6138958021999854547661999661712671999988691811' || ${cell_id} === '6138958021999817250831999645546861999988691811' || ${cell_id} === '6138958021999868115391999674125701999988749540' || ${cell_id} === '6138958021999803971781999599705251999988691811' || ${cell_id} === '6138958021999775392941999552997611999988518600' || ${cell_id} === '6138958021999741098331999493299601999988749540' || ${cell_id} === '6138958021999780069471999517490571999988576341' || ${cell_id} === '6138958021999769734901999587638631999988749540' || ${cell_id} === '6138958021999857261211999667428441999988518600' || ${cell_id} === '6138958021999719967311999506925061999988749540' || ${cell_id} === '6138958021999833763051999633999861999988691811' || ${cell_id} === '6138958021999728743041999531173771999988749540' || ${cell_id} === '6138958021999868346331999695025781999988634070' || ${cell_id} === '6138958021999808128701999624646781999988576341' || ${cell_id} === '6138958021999772159781999499188571999988634070' || ${cell_id} === '6138958021999747160511999568181931999988691811' || ${cell_id} === '6138958021999820195321999641101261999988518600' || ${cell_id} === '6138958021999869212361999683421041999988691811' || ${cell_id} === '6138958021999827469931999636251521999988749540' || ${cell_id} === '6138958021999861071721999693640141999988518600' || ${cell_id} === '6138958021999750566881999552766671999988518600' || ${cell_id} === '6138958021999790230841999592315171999988922751' || ${cell_id} === '6138958021999782667551999614081271999988518600' || ${cell_id} === '6138958021999773429951999580133081999988749540' || ${cell_id} === '6138958021999871637231999682959161999988691811' || ${cell_id} === '6138958021999833127961999638214511999988518600' || ${cell_id} === '6138958021999770254521999551669711999988576341' || ${cell_id} === '6138958021999739250811999555191541999988518600' || ${cell_id} === '6138958021999777991011999504096051999988691811' || ${cell_id} === '6138958021999821350021999636944341999988749540' || ${cell_id} === '6138958021999873253811999681111641999988576341' || ${cell_id} === '6138958021999827008051999671585361999988634070' || ${cell_id} === '6138958021999741156071999513102711999988691811' || ${cell_id} === '6138958021999739366281999484292931999988634070' || ${cell_id} === '6138958021999794503231999624069431999988691811' || ${cell_id} === '6138958021999867249361999682035401999988691811' || ${cell_id} === '6138958021999835783781999641332201999988749540' || ${cell_id} === '6138958021999760439571999485736311999988576341' || ${cell_id} === '6138958021999776432171999587292221999988634070' || ${cell_id} === '6138958021999833416641999636193791999988576341' || ${cell_id} === '6138958021999808417371999650223401999988518600' || ${cell_id} === '6138958021999794156821999600051661999988691811' || ${cell_id} === '6138958021999810438101999636424731999988691811' || ${cell_id} === '6138958021999759111661999501497971999988749540' || ${cell_id} === '6138958021999749412171999511312921999988518600' || ${cell_id} === '6138958021999824121301999652070921999988749540' || ${cell_id} === '6138958021999750393671999475459471999988576341' || ${cell_id} === '6138958021999852700141999658941391999988691811' || ${cell_id} === '6138958021999813959941999657382541999988749540' || ${cell_id} === '6138958021999773949561999552362531999988691811' || ${cell_id} === '6138958021999775681611999582153801999988691811' || ${cell_id} === '6138958021999855760091999689136811999988749540' || ${cell_id} === '6138958021999828509161999638676391999988749540' || ${cell_id} === '6138958021999770543191999577015381999988749540' || ${cell_id} === '6138958021999741560211999481983531999988518600' || ${cell_id} === '6138958021999724470641999511890271999988518600' || ${cell_id} === '6138958021999865228641999665465451999988749540' || ${cell_id} === '6138958021999853970311999659634211999988691811' || ${cell_id} === '6138958021999874119831999689136811999988518600' || ${cell_id} === '6138958021999798602421999589486151999988980480' || ${cell_id} === '6138958021999820714931999608711911999988576341' || ${cell_id} === '6138958021999772159781999498842161999988749540' || ${cell_id} === '6138958021999831915531999640004301999988691811' || ${cell_id} === '6138958021999792424771999553286291999988576341' || ${cell_id} === '6138958021999870540261999677936211999988749540' || ${cell_id} === '6138958021999747275981999557789621999988691811' || ${cell_id} === '6138958021999780069471999544510561999988691811' || ${cell_id} === '6138958021999785438831999603573501999988518600' || ${cell_id} === '6138958021999795138321999621586831999988518600' || ${cell_id} === '6138958021999777702341999582673421999988749540' || ${cell_id} === '6138958021999747680121999506232241999988749540' || ${cell_id} === '6138958021999856221971999667082031999988518600' || ${cell_id} === '6138958021999791558741999613157511999988518600' || ${cell_id} === '6138958021999859224201999693178261999988749540' || ${cell_id} === '6138958021999844501761999681919931999988576341' || ${cell_id} === '6138958021999838439591999639484681999988518600' || ${cell_id} === '6138958021999770312251999584636411999988634070' || ${cell_id} === '6138958021999770889601999578631971999988749540' || ${cell_id} === '6138958021999769330761999597164911999988691811' || ${cell_id} === '6138958021999772679391999535157491999988576341' || ${cell_id} === '6138958021999776316701999603804441999988749540' || ${cell_id} === '6138958021999819098351999665176771999988691811' || ${cell_id} === '6138958021999739885901999495320321999988576341' || ${cell_id} === '6138958021999715810391999513160441999988518600' || ${cell_id} === '6138958021999804318191999567489111999988807281' || ${cell_id} === '6138958021999773718621999544164151999988576341' || ${cell_id} === '6138958021999763672731999509523141999988691811' || ${cell_id} === '6138958021999807551351999618757811999988691811' || ${cell_id} === '6138958021999880586161999678975441999988749540' || ${cell_id} === '6138958021999772390721999532674881999988634070' || ${cell_id} === '6138958021999775277471999604497261999988518600' || ${cell_id} === '6138958021999882722351999680418821999988691811' || ${cell_id} === '6138958021999756802261999488449851999988749540' || ${cell_id} === '6138958021999803625371999609520201999988691811' || ${cell_id} === '6138958021999769792641999548782961999988691811' || ${cell_id} === '6138958021999824409971999668987281999988691811' || ${cell_id} === '6138958021999741271541999493819211999988691811' || ${cell_id} === '6138958021999762344821999546877701999988749540' || ${cell_id} === '6138958021999794676441999616852551999988749540' || ${cell_id} === '6138958021999739481751999478403961999988518600' || ${cell_id} === '6138958021999782725291999541508341999988691811' || ${cell_id} === '6138958021999867768981999700799281999988518600' || ${cell_id} === '6138958021999866960691999687173821999988518600' || ${cell_id} === '6138958021999744331491999506925061999988749540' || ${cell_id} === '6138958021999769850371999552766671999988749540' || ${cell_id} === '6138958021999865575051999681746721999988518600' || ${cell_id} === '6138958021999864593551999699240441999988691811' || ${cell_id} === '6138958021999771582431999582442481999988749540' || ${cell_id} === '6138958021999740982861999543990951999988749540' || ${cell_id} === '6138958021999769850371999545376591999988518600' || ${cell_id} === '6138958021999818694211999636482461999988749540' || ${cell_id} === '6138958021999790288571999609347001999988634070' || ${cell_id} === '6138958021999856452911999665580921999988518600' || ${cell_id} === '6138958021999808244171999644854041999988691811' || ${cell_id} === '6138958021999720775601999502190791999988634070' || ${cell_id} === '6138958021999840171641999640639381999988749540' || ${cell_id} === '6138958021999846637961999681631251999988518600' || ${cell_id} === '6138958021999831626851999655073141999988518600' || ${cell_id} === '6138958021999810784511999625224131999988691811' || ${cell_id} === '6138958021999744562431999469166351999988518600' || ${cell_id} === '6138958021999731629791999496763701999988518600' || ${cell_id} === '6138958021999841210871999671816301999988518600' || ${cell_id} === '6138958021999789133871999614081271999988749540' || ${cell_id} === '6138958021999847677191999672740061999988749540' || ${cell_id} === '6138958021999871464021999671585361999988749540' || ${cell_id} === '6138958021999798891091999636193791999988691811' || ${cell_id} === '6138958021999719736371999519164891999988749540' || ${cell_id} === '6138958021999771813371999583597181999988518600' || ${cell_id} === '6138958021999868461801999681746721999988749540' || ${cell_id} === '6138958021999750682351999532790351999988749540' || ${cell_id} === '6138958021999818347801999608885121999988518600' || ${cell_id} === '6138958021999746005811999559752611999988691811' || ${cell_id} === '6138958021999856568381999686942881999988518600' || ${cell_id} === '6138958021999829317451999646412891999988634070' || ${cell_id} === '6138958021999793002121999622452851999988691811' || ${cell_id} === '6138958021999804375921999629900671999988634070' || ${cell_id} === '6138958021999801373701999623549821999988518600' || ${cell_id} === '6138958021999809398871999625801481999988576341' || ${cell_id} === '6138958021999823774891999635789641999988634070' || ${cell_id} === '6138958021999734920681999501671171999988691811' || ${cell_id} === '6138958021999730475091999489950961999988749540' || ${cell_id} === '6138958021999736364061999529672661999988518600' || ${cell_id} === '6138958021999827643141999656631991999988576341' || ${cell_id} === '6138958021999866729751999685672711999988518600' || ${cell_id} === '6138958021999746236751999501093821999988691811' || ${cell_id} === '6138958021999707612021999499534981999988518600' || ${cell_id} === '6138958021999790981391999613272981999988749540' || ${cell_id} === '6138958021999796639431999571241881999988634070' || ${cell_id} === '6138958021999815749721999663098311999988576341' || ${cell_id} === '6138958021999812343351999670084251999988749540' || ${cell_id} === '6138958021999753569101999552420261999988518600' || ${cell_id} === '6138958021999816846691999592603841999988518600' || ${cell_id} === '6138958021999786882211999607672681999988691811' || ${cell_id} === '6138958021999777298191999608827381999988691811' || ${cell_id} === '6138958021999720948811999529730401999988691811' || ${cell_id} === '6138958021999824814121999637983571999988634070' || ${cell_id} === '6138958021999739366281999478403961999988749540' || ${cell_id} === '6138958021999752414401999484177461999988518600' || ${cell_id} === '6138958021999780300411999592199701999988576341' || ${cell_id} === '6138958021999837689031999641967291999988691811' || ${cell_id} === '6138958021999877237521999695949541999988518600' || ${cell_id} === '6138958021999806165711999627071651999988576341' || ${cell_id} === '6138958021999812227881999612349221999988518600' || ${cell_id} === '6138958021999768695671999598030931999988749540' || ${cell_id} === '6138958021999809110191999624127171999988749540' || ${cell_id} === '6138958021999834975481999607499481999988518600' || ${cell_id} === '6138958021999761305591999514777031999988749540' || ${cell_id} === '6138958021999860956251999687751171999988749540' || ${cell_id} === '6138958021999796812631999615755591999988576341' || ${cell_id} === '6138958021999855875561999620085711999988749540' || ${cell_id} === '6138958021999780935501999530711891999988518600' || ${cell_id} === '6138958021999816327071999646239681999988807281' || ${cell_id} === '6138958021999851718641999660846641999988518600' || ${cell_id} === '6138958021999786766741999626147891999988691811' || ${cell_id} === '6138958021999777875541999549129371999988691811' || ${cell_id} === '6138958021999757321871999565987991999988691811' || ${cell_id} === '6138958021999752125721999501209291999988691811' || ${cell_id} === '6138958021999821119081999646759301999988749540' || ${cell_id} === '6138958021999786824471999611887341999988749540' || ${cell_id} === '6138958021999709575011999516855491999988518600' || ${cell_id} === '6138958021999736017651999541797021999988518600' || ${cell_id} === '6138958021999813959941999579093851999988749540' || ${cell_id} === '6138958021999712923641999503691901999988518600' || ${cell_id} === '6138958021999743869611999503691901999988518600' || ${cell_id} === '6138958021999875505471999702415861999988518600' || ${cell_id} === '6138958021999861822271999663560191999988691811' || ${cell_id} === '6138958021999745024311999543529071999988749540' || ${cell_id} === '6138958021999761074651999521127881999988518600' || ${cell_id} === '6138958021999723951031999509985021999988691811' || ${cell_id} === '6138958021999786709001999611540931999988634070' || ${cell_id} === '6138958021999816038401999669737841999988749540' || ${cell_id} === '6138958021999854720861999645604601999988749540' || ${cell_id} === '6138958021999775623881999601379571999988749540' || ${cell_id} === '6138958021999771524691999549706721999988576341' || ${cell_id} === '6138958021999832319671999649299641999988518600' || ${cell_id} === '6138958021999833647581999672335911999988576341' || ${cell_id} === '6138958021999845483261999605998371999988634070' || ${cell_id} === '6138958021999831973261999671008011999988749540' || ${cell_id} === '6138958021999736190851999520954671999988576341' || ${cell_id} === '6138958021999786131651999542605311999988518600' || ${cell_id} === '6138958021999860667571999694852571999988576341' || ${cell_id} === '6138958021999788325581999602534271999988634070' || ${cell_id} === '6138958021999736999141999517375101999988576341' || ${cell_id} === '6138958021999739250811999509118991999988518600' || ${cell_id} === '6138958021999746236751999500516471999988691811' || ${cell_id} === '6138958021999783475841999539025741999988749540' || ${cell_id} === '6138958021999864073941999671700831999988634070' || ${cell_id} === '6138958021999717946591999529845871999988691811' || ${cell_id} === '6138958021999741675681999545607531999988518600' || ${cell_id} === '6138958021999808763781999594797771999988634070' || ${cell_id} === '6138958021999870655731999668583141999988749540' || ${cell_id} === '6138958021999742714911999542836251999988634070' || ${cell_id} === '6138958021999795138321999622972471999988518600' || ${cell_id} === '6138958021999863265651999699875521999988518600' || ${cell_id} === '6138958021999768695671999585560171999988634070' || ${cell_id} === '6138958021999749181231999526670441999988634070' || ${cell_id} === '6138958021999872272311999703339621999988518600' || ${cell_id} === '6138958021999864766761999674125701999988749540' || ${cell_id} === '6138958021999764769691999525169331999988749540' || ${cell_id} === '6138958021999876833381999725683081999988691811' || ${cell_id} === '6138958021999796581691999629727461999988691811' || ${cell_id} === '6138958021999790173101999620316651999988749540' || ${cell_id} === '6138958021999861995481999660962111999988634070' || ${cell_id} === '6138958021999750278201999477076051999988691811' || ${cell_id} === '6138958021999701261161999506578651999988749540' || ${cell_id} === '6138958021999715694921999516740021999988749540' || ${cell_id} === '6138958021999774469181999570433591999988634070' || ${cell_id} === '6138958021999841037661999674414371999988576341' || ${cell_id} === '6138958021999797101311999644103491999988749540' || ${cell_id} === '6138958021999754319651999502363991999988691811' || ${cell_id} === '6138958021999713039111999503114551999988634070' || ${cell_id} === '6138958021999866383341999700106461999988634070' || ${cell_id} === '6138958021999873311541999680130141999988518600' || ${cell_id} === '6138958021999820541731999650800751999988749540' || ${cell_id} === '6138958021999773487681999568412871999988691811' || ${cell_id} === '6138958021999812458821999612349221999988749540' || ${cell_id} === '6138958021999741040601999547281851999988691811' || ${cell_id} === '6138958021999836707541999626667511999988749540' || ${cell_id} === '6138958021999753395891999534464671999988691811' || ${cell_id} === '6138958021999774700121999604728201999988749540' || ${cell_id} === '6138958021999742368501999558193771999988518600' || ${cell_id} === '6138958021999779203451999524707451999988518600' || ${cell_id} === '6138958021999741560211999495378061999988518600' || ${cell_id} === '6138958021999867884451999670315191999988749540' || ${cell_id} === '6138958021999757726021999578054621999988634070' || ${cell_id} === '6138958021999833820781999621124951999988749540' || ${cell_id} === '6138958021999833705311999607614951999988634070' || ${cell_id} === '6138958021999813267111999615928791999988749540' || ${cell_id} === '6138958021999812343351999614196741999988749540' || ${cell_id} === '6138958021999726895511999499534981999988749540' || ${cell_id} === '6138958021999817885921999634404001999988518600' || ${cell_id} === '6138958021999878276761999678282621999988518600' || ${cell_id} === '6138958021999789076141999608250031999988691811' || ${cell_id} === '6138958021999759227131999577361791999988518600' || ${cell_id} === '6138958021999843058391999680361081999988634070' || ${cell_id} === '6138958021999859108731999670430661999988749540' || ${cell_id} === '6138958021999735902181999551958381999988518600' || ${cell_id} === '6138958021999759169391999537582361999988691811' || ${cell_id} === '6138958021999729089451999501382501999988749540' || ${cell_id} === '6138958021999795022851999626898451999988518600' || ${cell_id} === '6138958021999779434391999605421021999988634070' || ${cell_id} === '6138958021999761709741999544741501999988691811' || ${cell_id} === '6138958021999852353731999624993191999989153691' || ${cell_id} === '6138958021999805877031999625281871999988634070' || ${cell_id} === '6138958021999864535821999669506901999988518600' || ${cell_id} === '6138958021999857838561999691792621999988749540' || ${cell_id} === '6138958021999774122771999543644541999988518600' || ${cell_id} === '6138958021999756629051999489893231999988576341' || ${cell_id} === '6138958021999820772671999608885121999988749540' || ${cell_id} === '6138958021999845483261999606691191999988749540' || ${cell_id} === '6138958021999749700851999504904341999988691811' || ${cell_id} === '6138958021999760612771999508195231999988518600' || ${cell_id} === '6138958021999742426241999479731861999988576341' || ${cell_id} === '6138958021999761305591999514430621999988518600' || ${cell_id} === '6138958021999738269311999521416551999988576341' || ${cell_id} === '6138958021999836823011999678975441999988634070' || ${cell_id} === '6138958021999812632031999661943611999988576341' || ${cell_id} === '6138958021999833647581999646701561999988576341' || ${cell_id} === '6138958021999807609081999627937681999988518600'"

Ion.defaultAccessToken = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI3YmUwZmQyZi0xMTZmLTQ0YzgtYmY5NS0wNmU1OTM1Y2M5M2YiLCJpZCI6MzI1MDEwLCJpYXQiOjE3NTM0MjI1MzV9.-uImTS0_4uarVz2IKXv7yNRDxYxTmkh4DudgfYJ21xE';


const CesiumMap = () => {
  const viewerRef = useRef()
  const [cameraHeight, setCameraHeight] = useState(0)
  const selectedFeatureRef = useRef(null)
  const [renderedFeature, setRenderedFeature] = useState(null)
  const [copiedKey, setCopiedKey] = useState(null)
  const [popupPosition, setPopupPosition] = useState({ x: 350, y: 20 })
  const [selectedLevel, setSelectedLevel] = useState(5)
  const [selectedCellId, setSelectedCellId] = useState(null)
  const [selectedCellLevel, setSelectedCellLevel] = useState(null)
  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 })
  const [isDragging, setIsDragging] = useState(false)
  const [searching, setSearching] = useState(false)
  const [filterProps, setFilterProps] = useState([
    'pc_build3d',
    'pc_green3d',
    'pc_roads_3d',
    'pc_water3d',
    'LST',
    'NDVI',
    'AQI',
    'TJ',
  ])
  const [filterRanges, setFilterRanges] = useState({
    pc_build3d: [0, 100],
    pc_green3d: [0, 100],
    pc_roads_3d: [0, 100],
    pc_water3d: [0, 100],
    LST: [0, 100],
    NDVI: [0, 100],
    AQI: [0, 100],
    TJ: [0, 100],
  });
  const [selectedProperty, setSelectedProperty] = useState('pc_build3d');
  const [loading, setLoading] = useState(false)
  const [routeInfo, setRouteInfo] = useState({
    startCell: null,
    finishCell: null,
    routeCellIds: [],
    showStartsCells: false,
  });
  const [filterCellId, setFilterCellId] = useState(null)
  const [showParentFilter, setShowParentFilter] = useState(false)
  const [showChildrenFilter, setShowChildrenFilter] = useState(false)
  const [showCells, setShowCells] = useState(true)
  const [showedOsmBuildings, setShowOsmBuildings] = useState(true);
  const osmBuildingsRef = useRef(null);
  const timeout = {
    5: 1000,
    4: 1500,
    3: 5000,
    2: 6000,
    1: 7000
  }

  // const getBaseColor = () => {
  //   switch (selectedProperty) {
  //     case 'pc_build3d': return '#67000D';
  //     case 'pc_green3d': return '#006837';
  //     case 'pc_roads_3d': return '#1A1A1A';
  //     default: return '#000000';
  //   }
  // };

  // const colorBySelectedProperty = (tileset) => {
  //   if (!tileset || !selectedProperty) return;
  //
  //   const colors = [
  //     'color("rgba(0, 102, 255, 0.5)")',
  //     'color("rgba(0, 149, 255, 0.5)")',
  //     'color("rgba(71, 178, 255, 0.5)")',
  //     'color("rgba(94, 202, 239, 0.5)")',
  //     'color("rgba(240, 216, 30, 0.5)")',
  //     'color("rgba(255, 188, 0, 0.5)")',
  //     'color("rgba(255, 137, 3, 0.5)")',
  //     'color("rgba(255, 84, 0, 0.5)")',
  //     'color("rgba(255, 43, 0, 0.5)")',
  //     'color("rgba(255, 0, 0, 0.7)")',
  //   ];
  //
  //   const conditions = [];
  //   for (let i = 0; i < 10; i++) {
  //     const min = i * 10;
  //     const max = i === 9 ? 10000000 : (i + 1) * 10;
  //     conditions.push([`\${${selectedProperty}} >= ${min} && \${${selectedProperty}} < ${max}`, colors[i]]);
  //   }
  //
  //   // fallback
  //   conditions.push(['true', 'color("white")']);
  //
  //   tileset.style = new Cesium.Cesium3DTileStyle({
  //     color: {
  //       conditions
  //     }
  //   });
  // };
  useEffect(() => {
    if(showedOsmBuildings){
      createOsmBuildingsAsync().then(buildings => {
        osmBuildingsRef.current = buildings;
        viewerRef.current.scene.primitives.add(buildings);
      });
    } else {
      viewerRef.current?.scene.primitives._primitives
        .filter(p => p._url?.includes('OpenStreetMap'))
        .forEach(p => viewerRef.current.scene.primitives.remove(p));
    }
  }, [showedOsmBuildings])

  const colorByType = () => {
    const viewer = viewerRef.current
    const scene = viewer?.scene

    if (!scene) return

    const tileset = scene.primitives._primitives.find(p => p instanceof Cesium3DTileset)
    if (!tileset) return

    const applyColoring = (tile) => {
      if (tile.content?.featuresLength > 0) {
        for (let i = 0; i < tile.content.featuresLength; i++) {
          const feature = tile.content.getFeature(i)
          const type = feature.getProperty('type')?.toLowerCase()

          switch (type) {
            case 'blue':
              feature.color = Color.BLUE
              break
            case 'red':
              feature.color = Color.RED
              break
            case 'green':
              feature.color = Color.GREEN
              break
            default:
              feature.color = Color.WHITE
              break
          }
        }
      }
      tile.children?.forEach(applyColoring)
    }

    applyColoring(tileset.root)
  }

  const applyStyleToTileset = (
    tileset,
  ) => {
    if (!tileset) return;

    const style = {};
    console.log(':::::BEFORE FILTERS:::::');
    console.log('activeProps:', filterProps);
    console.log('filterRanges:', filterRanges.pc_build3d);
    tileset.show = showCells
    console.log('osmBuildingsRef.current:: - ', osmBuildingsRef.current)
    console.log('showedOsmBuildings:: - ', showedOsmBuildings)

    // if (!osmBuildingsRef.current) {
    //   createOsmBuildingsAsync().then(osm => {
    //     osmBuildingsRef.current = osm;
    //     viewer.scene.primitives.add(osm);
    //     osm.show = true;
    //     setShowOsmBuildings(true);
    //   });
    // } else {
    //   const osm = osmBuildingsRef.current;
    //   osm.show = !osm.show;
    //   setShowOsmBuildings(osm.show);
    // }
    // === 1. ФИЛЬТРАЦИЯ ===
    console.log('routeInfo?.routeCellIds?.length: - ', routeInfo?.routeCellIds?.length)
    console.log('window.showStartsCells: - ', window.showStartsCells)
    console.log('routeInfo?.showStartsCells: - ', routeInfo.showStartsCells);
    if (routeInfo?.routeCellIds?.length > 0 || window.showStartsCells) {
      console.log('// === ROUTE OR START CELLS FILTER ===');

debugger
      if(routeInfo?.routeCellIds?.length > 0) {
        debugger
        const idsSet = new Set([
          ...(routeInfo.routeCellIds || [])
        ]);

        const cellConditions = Array.from(idsSet)
          .map(id => `\${cell_id} === '${id}'`)
          .join(' || ');

        style.show = {
          conditions: [
            [cellConditions, 'true'],
            ['true', 'false']
          ]
        };
      } else {
        style.show = {
          conditions: [
            [start_cell_filter, 'true'],
            ['true', 'false']
          ]
        };
      }
      // const idsSet = new Set([
      //   ...(routeInfo.routeCellIds || []),
      //   ...(window.showStartsCells ? starts.map(s => s) : [])
      // ]);

      // const cellConditions = Array.from(idsSet)
      //   .map(id => `\${cell_id} === '${id}'`)
      //   .join(' || ');

      // style.show = {
      //   conditions: [
      //     [start_cell_filter, 'true'],
      //     ['true', 'false']
      //   ]
      // };
      // console.log('start_cell_filter:', start_cell_filter);
      // console.log(`[✓] Applied route/startCell filter: ${cellConditions}`);
    } else if ((filterCellId && (showParentFilter || showChildrenFilter)) || filterProps) {
        console.log('// === COMBINED PARENT/CHILD + PROPS FILTER ===');

        const combinedConditions = [];

        // === 1. Parent/Child Condition
        if (filterCellId && (showParentFilter || showChildrenFilter)) {
          const comparisonKey = showParentFilter ? 'cell_id' : 'parent_id';
          const hierarchyCondition = `\${${comparisonKey}} === '${filterCellId}'`;
          combinedConditions.push(hierarchyCondition);
          console.log(`[✓] Applied ${showParentFilter ? 'parent' : 'children'} filter on ${filterCellId}`);
        }

        // === 2. Property Ranges Condition
        if (filterProps?.length > 0) {
          const rangeConditions = filterProps.map(key => {
            const [min, max] = filterRanges?.[key] || [0, 100];
            return `\${${key}} >= ${min} && \${${key}} <= ${max}`;
          });
          const combinedRangeCondition = rangeConditions.join(' && ');
          combinedConditions.push(combinedRangeCondition);
          console.log(`[✓] Applied props filter: ${combinedRangeCondition}`);
        }

        // === 3. Сборка финального условия
        const fullCondition = combinedConditions.join(' && ');
        const showConditions = [];

        if (selectedProperty) {
          showConditions.push([`\${${selectedProperty}} === 0`, 'false']);
        }

        showConditions.push([fullCondition, 'true']);
        showConditions.push(['true', 'false']); // fallback

        style.show = { conditions: showConditions };
        console.log('selectedLevel: ', selectedLevel);
        console.log(`[✓] Final combined condition: ${fullCondition}`);
      }

    // === 2. РАСКРАСКА ===
    if (selectedProperty) {
      console.log('// === COLORING ===');

      const colors = [
        'color("rgba(0, 102, 255, 0.05)")',
        'color("rgba(0, 149, 255, 0.2)")',
        'color("rgba(71, 178, 255, 0.3)")',
        'color("rgba(94, 202, 239, 0.4)")',
        'color("rgba(240, 216, 30, 0.5)")',
        'color("rgba(255, 188, 0, 0.6)")',
        'color("rgba(255, 137, 3, 0.7)")',
        'color("rgba(255, 84, 0, 0.8)")',
        'color("rgba(255, 43, 0, 0.9)")',
        'color("rgba(255, 0, 0, 1)")',
      ];
      // console.log('level from props:: - ', level);
      const levelConfig = getLevelConfig(selectedLevel, selectedProperty);
      if (!levelConfig) {
        console.warn(`⚠️ no levelConfig for level=${selectedLevel} & prop=${selectedProperty}`);
        return;
      }

      const { thresholds } = levelConfig;

      if (!thresholds || thresholds.length < 2) {
        console.warn(`⚠️ invalid thresholds:`, thresholds);
        return;
      }

      if (thresholds.length - 1 > colors.length) {
        console.warn(`⚠️ not enough colors for thresholds. thresholds=${thresholds.length - 1} colors=${colors.length}`);
        return;
      }

      const colorConditions = [];
      for (let i = 0; i < thresholds.length - 1; i++) {
        const min = thresholds[i];
        const max = thresholds[i + 1];
        colorConditions.push([
          `\${${selectedProperty}} >= ${min} && \${${selectedProperty}} < ${max}`,
          colors[i]
        ]);
      }

      colorConditions.push(['true', 'color("rgba(0,0,0,0)")']); // fallback

      style.color = { conditions: colorConditions };
      console.log(`[✓] Applied color scheme for ${selectedProperty}`);
    }
    tileset.style = new Cesium.Cesium3DTileStyle(style);
  };



  // const applyFeatureFilter = (tileset) => {
  //   const props = Object.keys(filterProps).filter(key => filterProps[key])
  //   console.log('applyFeatureFilter props: - ', props)
  //   if (props.length === 0) {
  //     // Если ничего не выбрано — показать все фичи
  //     const resetTile = (tile) => {
  //       if (tile.content?.featuresLength > 0) {
  //         for (let i = 0; i < tile.content.featuresLength; i++) {
  //           tile.content.getFeature(i).show = true
  //         }
  //       }
  //       tile.children?.forEach(resetTile)
  //     }
  //     resetTile(tileset.root)
  //     return
  //   }
  //
  //   const filterTile = (tile) => {
  //     if (tile.content?.featuresLength > 0) {
  //       for (let i = 0; i < tile.content.featuresLength; i++) {
  //         const feature = tile.content.getFeature(i)
  //
  //         if (props.length === 0) {
  //           feature.show = true
  //           continue
  //         }
  //
  //         const shouldShow = props.every((prop) => {
  //           const val = parseFloat(feature.getProperty(prop))
  //           console.log('val: ', val)
  //           console.log('!isNaN(val) && val > 0', !isNaN(val) && val > 0)
  //           return !isNaN(val) && val > 0
  //         })
  //
  //         feature.show = false
  //       }
  //     }
  //
  //     tile.children?.forEach(filterTile)
  //   }
  //
  //   filterTile(tileset.root)
  // }

  const loadTileset = async (level,current_cell_id) => {

    try {
      const viewer = viewerRef.current
      if (!viewer) throw new Error('Viewer is not initialized yet')
      setLoading(true)
      viewer.scene.primitives._primitives
        .filter(p => p._url?.includes('https://s3-3d-tiles'))
        .forEach(p => viewerRef.current.scene.primitives.remove(p));

      const tileset = await Cesium3DTileset.fromUrl(
        // `https://s3-3d-tiles.s3.eu-north-1.amazonaws.com/lvl2_routing/tileset.json`
        `https://s3-3d-tiles.s3.eu-north-1.amazonaws.com/lvl${level}/tileset.json`
        // `https://s3-3d-tiles.s3.eu-north-1.amazonaws.com/lvl${level}m/tileset/tileset.json`
        //   `https://s3-3d-tiles.s3.eu-north-1.amazonaws.com/lvl3_test_merged-tiles/tileset.json`
        //   `https://s3-3d-tiles.s3.eu-north-1.amazonaws.com/marked/lvl${level}/tileset.json`
      )
      // const tileset = await Cesium3DTileset.fromUrl(
      //   `https://s3-3d-tiles.s3.eu-north-1.amazonaws.com/lvl5tetsfme/lvl4_test/tileset/tileset.json`
      // )

      tileset.maximumScreenSpaceError = 8 // Увеличьте для снижения детализации и повышения производительности
      tileset.maximumMemoryUsage = 512 // Максимальное использование памяти в МБ
      tileset.cullWithChildrenBounds = true // Использовать объединенные границы дочерних тайлов для отсечения
      tileset.dynamicScreenSpaceError = true // Включить динамическую ошибку экранного пространства
      tileset.dynamicScreenSpaceErrorDensity = 0.00278 // Плотность для динамической ошибки
      tileset.dynamicScreenSpaceErrorFactor = 4.0 // Фактор для динамической ошибки
      tileset.dynamicScreenSpaceErrorHeightFalloff = 0.25 // Падение высоты для динамической ошибки
      tileset.skipLevelOfDetail = true // Пропуск уровней детализации
      tileset.baseScreenSpaceError = 1024 // Базовая ошибка экранного пространства
      tileset.skipScreenSpaceErrorFactor = 16 // Фактор ошибки для пропуска уровней
      tileset.skipLevels = 1 // Количество уровней для пропуска
      tileset.immediatelyLoadDesiredLevelOfDetail = false // Немедленная загрузка желаемого уровня детализации
      tileset.loadSiblings = false // Загрузка соседних тайлов
      tileset.foveatedScreenSpaceError = true // Приоритизация загрузки тайлов в центре экрана
      tileset.foveatedConeSize = 0.1 // Размер конуса для фовеации
      tileset.foveatedMinimumScreenSpaceErrorRelaxation = 0.0 // Минимальное ослабление ошибки экранного пространства для фовеации
      tileset.foveatedTimeDelay = 0.2 // Задержка времени для фовеации

      viewer.scene.primitives.add(tileset)
      if(!current_cell_id){
        console.log('::New ChildrenParentFlow:: - loadTileset, I have filterCellId: - ', current_cell_id)
        await viewer.zoomTo(tileset)
      }

      const height = viewer.scene.camera.positionCartographic.height;
      console.log('📏 Высота камеры:', height);
      console.log('::loadTileset:: level - ', level)
      //FIXME в applyStyleToTileset Передавай LEvel
      console.log('::loadTileset:: selectedLevel - ', selectedLevel)
      applyStyleToTileset(tileset, Object.keys(filterProps).filter(k => filterProps[k]), filterRanges, selectedProperty, routeInfo, level);
      // applyFilterToTileset(tileset, Object.keys(filterProps).filter(k => filterProps[k]))
      // colorBySelectedProperty(tileset)
      setLoading(false)

      console.log(`%c[✓] Tileset lvl${level} loaded & zoomed`, 'color: green')
    } catch (error) {
      console.error(`%c[✗] Error loading tileset lvl${level}m:`, 'color: red', error)
    }
  }



  const handleSearch = (searchId, isParentSearch = false, color = Color.BLUE) => {
    const viewer = viewerRef.current
    const scene = viewer?.scene

    if (!scene || !searchId) return

    const tileset = scene.primitives._primitives.find(p => p instanceof Cesium3DTileset)
    if (!tileset) return

    let found = false

    const searchInTile = (tile) => {
      if (tile.content?.featuresLength > 0) {
        for (let i = 0; i < tile.content.featuresLength; i++) {
          const feature = tile.content.getFeature(i)
          const targetValue = isParentSearch ? feature.getProperty('parent_id') : feature.getProperty('cell_id')

          if (targetValue === searchId) {
            if (!isParentSearch && selectedFeatureRef.current && selectedFeatureRef.current !== feature) {
              selectedFeatureRef.current.color = Color.WHITE
            }

            feature.color = color

            if (!isParentSearch) {
              selectedFeatureRef.current = feature
              setRenderedFeature(feature)
              setSelectedCellId(searchId)
              setSelectedCellLevel(feature.getProperty('level'))
              // flyToFeature(viewer, feature)
              const lon = parseFloat(feature.getProperty('Longitude'));
              const lat = parseFloat(feature.getProperty('Latitude'));
              const height = parseFloat(feature.getProperty('Height') || 0);

              if (!isNaN(lon) && !isNaN(lat)) {
                // целевая точка
                const target = Cesium.Cartesian3.fromDegrees(lon, lat, height);

                // расчёт небольшой «не доезжаемости»
                const offset = new Cesium.Cartesian3(500, 650, -500); // 500 м вверх
                const destination = Cesium.Cartesian3.add(target, offset, new Cesium.Cartesian3());


                viewer.camera.flyTo({
                  destination,
                  duration: 1.5,
                  orientation: {
                    heading: viewer.camera.heading,
                    pitch: viewer.camera.pitch,
                    roll: viewer.camera.roll
                  }
                });

                console.log(`🛰️ Flying to cell_id: ${searchId} at [${lon}, ${lat}, ${height}]`);
              } else {
                console.warn(`🙈 Не удалось получить координаты для cell_id: ${searchId}`);
              }
            }

            found = true
          }
        }
      }

      tile.children?.forEach(searchInTile)
    }

    searchInTile(tileset.root)

    if (!found) {
      console.warn(`Cell ID ${searchId} not found.`)
    }
  }

  useEffect(() => {
    const handleMouseMove = (e) => {
      if (isDragging) {
        setPopupPosition((prev) => ({
          x: e.clientX - dragOffset.x,
          y: e.clientY - dragOffset.y,
        }))
      }
    }

    const handleMouseUp = () => {
      setIsDragging(false)
    }

    window.addEventListener('mousemove', handleMouseMove)
    window.addEventListener('mouseup', handleMouseUp)

    return () => {
      window.removeEventListener('mousemove', handleMouseMove)
      window.removeEventListener('mouseup', handleMouseUp)
    }
  }, [isDragging, dragOffset])

  useEffect(() => {

    const viewer = new Viewer('cesiumContainer', {
      baseLayerPicker: true,
      sceneMode: 3,
      infoBox: false,
      selectionIndicator: false,
      timeline: false,
      animation: false,
      creditContainer: document.createElement('div'),
    })

    viewerRef.current = viewer
    // if (!osmBuildingsRef.current) {
    //   createOsmBuildingsAsync().then(buildings => {
    //     osmBuildingsRef.current = buildings;
    //     viewer.scene.primitives.add(buildings);
    //   });
    // }
    viewer.imageryLayers.addImageryProvider(
      new OpenStreetMapImageryProvider({
        url: 'https://a.tile.openstreetmap.org/'
      })
    )
    // viewer.scene.globe.depthTestAgainstTerrain = true

    // const loadTileset = async () => {
    //   try {
    //
    //     //FIXME OLD ONE
    //     // const tileset = await Cesium3DTileset.fromUrl('https://my-3d-tiles.s3.eu-north-1.amazonaws.com/tiles/test/tileset.json')
    //     const tileset = await Cesium3DTileset.fromUrl('https://s3-3d-tiles.s3.eu-north-1.amazonaws.com/lvl5/tileset.json')
    //     viewer.scene.primitives.add(tileset)
    //     await viewer.zoomTo(tileset)
    //     console.log('%c[✓] Tileset loaded & zoomed', 'color: green')
    //   } catch (error) {
    //     console.error('%c[✗] Error loading tileset:', 'color: red', error)
    //   }
    // }



    loadTileset(selectedLevel)

    const handler = new ScreenSpaceEventHandler(viewer.scene.canvas)

    handler.setInputAction((movement) => {
      const pickedFeature = viewer.scene.pick(movement.position)

      // === HANDLE START CELL SELECT WHEN ACTIVE ===
      if (window.showStartsCells) {
        const id = pickedFeature.getProperty('cell_id');
        console.log(`[📍] Picked start cell: ${id}`);

        setRouteInfo(prev => ({
          ...prev,
          startCell: id,
          showStartsCells: true // ← опционально, если хочешь выйти из режима после выбора
        }));

        return; // не продолжать обработку клика
      }

      console.log('%c[✓] Picked Feature:', 'color: cyan', pickedFeature)
      // debugger
      // Сброс цвета предыдущей фичи
      console.log('Feature properties:');
      pickedFeature.getPropertyIds?.().forEach((name) => {
        console.log(`${name} – ${pickedFeature.getProperty(name)}`);
      });
      if (selectedFeatureRef.current && typeof selectedFeatureRef.current.color !== 'undefined') {
        try {
          selectedFeatureRef.current.color = Color.WHITE
        } catch (e) {
          console.warn('Не удалось сбросить цвет предыдущей фичи:', e)
        }
      }

      if (pickedFeature && pickedFeature.getProperty) {
        if (pickedFeature.color) pickedFeature.color = Color.BLUE
        selectedFeatureRef.current = pickedFeature
        setRenderedFeature(pickedFeature)
        setSelectedCellId(pickedFeature.getProperty('cell_id'))
        setSelectedCellLevel(pickedFeature.getProperty('level'))
        setPopupPosition({ x: 350, y: 20 })
      } else {
        setSelectedCellId(null)
        setSelectedCellLevel(null)
        selectedFeatureRef.current = null
        setRenderedFeature(null)
      }
    }, ScreenSpaceEventType.LEFT_CLICK)

    handler.setInputAction((movement) => {
      const feature = viewer.scene.pick(movement.endPosition)
      if (feature && feature.getProperty) {
        viewer.canvas.style.cursor = 'pointer'
      } else {
        viewer.canvas.style.cursor = 'default'
      }
    }, ScreenSpaceEventType.MOUSE_MOVE)

    viewer.scene.camera.moveEnd.addEventListener(() => {
      const carto = Cartographic.fromCartesian(viewer.scene.camera.position)
      setCameraHeight(carto.height)
    })

    return () => {
      if (viewer && !viewer.isDestroyed()) {
        viewer.destroy()
      }
    }
  }, [])

  useEffect(() => {
    const viewer = viewerRef.current;
    if (!viewer) return;

    if (selectedLevel !== 2) return;

    const flyAndSearch = (cellId, color) => {
      const coord = coordsMap[cellId]; // твой словарь {cell_id: {lon, lat, height}}

      if (coord) {
        const { lon, lat, height = 0 } = coord;

        const target = Cesium.Cartesian3.fromDegrees(lon, lat, height);
        const offset = new Cesium.Cartesian3(500, 650, -500);
        const destination = Cesium.Cartesian3.add(target, offset, new Cesium.Cartesian3());
        setSearching(true);
        viewer.camera.flyTo({
          destination,
          duration: 1.5,
          orientation: {
            heading: viewer.camera.heading,
            pitch: viewer.camera.pitch,
            roll: viewer.camera.roll
          }
        });

        console.log(`🛰️ Flying (via coords) to cell_id: ${cellId} at [${lon}, ${lat}, ${height}]`);

        setTimeout(() => {
          handleSearch(cellId, false, color)
          setSearching(false)
        }, 4000);

      } else {
        console.warn(`😵 Нет координат в словаре для cell_id: ${cellId}`);
      }
    };

    if (routeInfo.startCell) {
      flyAndSearch(routeInfo.startCell, Cesium.Color.GREEN);
    }

    if (routeInfo.finishCell) {
      flyAndSearch(routeInfo.finishCell, Cesium.Color.RED);
    }
  }, [routeInfo.startCell,routeInfo.finishCell, selectedLevel]);

  useEffect(() => {
    const viewer = viewerRef.current
    console.log('!!!!!!!!!!!!!!!viewer', viewer)
    if (!viewer) return

    const condition = viewer.scene.primitives._primitives.filter(p => p._url?.includes('https://s3-3d-tiles')).length

    setTimeout(
      () => {
        const tileset = viewer.scene.primitives._primitives.find(p => p._url?.includes('https://s3-3d-tiles'))
        if(!tileset){return}
        console.log('!!!!!!!!!!!!!!!tileset', tileset)
        console.log('!!!!!!!!!!!!!!!applyStyleToTileset at useEffect')
        applyStyleToTileset(tileset)},
      timeout[selectedLevel])


    // applyFilterToTileset(tileset, );
  }, [filterProps, filterRanges, selectedProperty, routeInfo, selectedLevel, showCells, filterCellId]);

  // useEffect(() => {
  //   const viewer = viewerRef.current;
  //   if (!viewer) return;
  //
  //   const tileset = viewer.scene.primitives._primitives.find(p => p instanceof Cesium3DTileset);
  //   if (tileset) {
  //     colorBySelectedProperty(tileset);
  //   }
  // }, [selectedProperty]);
  const formatDecimelsBGRW = (value) => {
    const num = parseFloat(value);
    if (isNaN(num)) return value; // вдруг там null или чушь
    const decimals = (selectedLevel === 4 || selectedLevel === 5) ? 6 : 2;
    return num.toFixed(decimals);
  };

  const formatDecimelsLNAT = (value) => {
    const num = parseFloat(value);
    if (isNaN(num)) return value; // вдруг там null или чушь
    const decimals = 2;
    return num.toFixed(decimals);
  };

  return (
    <>
      {loading && (
        <div style={{
          position: 'absolute',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          background: 'rgba(0,0,0,0.7)',
          color: 'white',
          padding: '20px 40px',
          borderRadius: '8px',
          zIndex: 2000
        }}>
          Загрузка тайлсета...
        </div>
      )}
      {searching && (
        <div style={{
          position: 'absolute',
          top: '50%',
          left: '50%',
          transform: 'translate(-50%, -50%)',
          background: 'rgba(0,0,0,0.7)',
          color: 'white',
          padding: '20px 40px',
          borderRadius: '8px',
          zIndex: 2000
        }}>
          Ищем искомый объект...
        </div>
      )}
      <div id="cesiumContainer" style={{ width: '100%', height: '100vh' }} />
      <UI
        onToggleLevel={(level) => {
          console.log('toggleLevel', level);
          // Сбросить предыдущую выбранную фичу и скрыть попап
          if (selectedFeatureRef.current && selectedFeatureRef.current.color) {
            try {
              selectedFeatureRef.current.color = Color.WHITE
            } catch (e) {
              console.warn('Не удалось сбросить цвет предыдущей фичи:', e)
            }
            selectedFeatureRef.current = null
            setRenderedFeature(null)
            setSelectedCellId(null)
            setSelectedCellLevel(null)
          }
          setSelectedLevel(level)
          loadTileset(level)
        }}
        filterProps={filterProps}
        activeLevels={selectedLevel}
        onSearch={handleSearch}
        onColorByType={colorByType}
        setFilterProps={setFilterProps}
        onUpdateFilterRanges={setFilterRanges}
        selectedProperty={selectedProperty}
        setSelectedProperty={setSelectedProperty}
        onRouteChange={setRouteInfo}
        routeInfo={routeInfo}
        setShowCells={setShowCells}
        showCells={showCells}
        showedOsmBuildings={showedOsmBuildings}
        setShowOsmBuildings={setShowOsmBuildings}
        setFilterCellId={setFilterCellId}
        setShowParentFilter={setShowParentFilter}
        setShowChildrenFilter={setShowChildrenFilter}
        filterCellId={filterCellId}
        showChildrenFilter={showChildrenFilter}
        showParentFilter={showParentFilter}
        loadTileset={loadTileset}
      />
      {renderedFeature && (
        <div
          className={'scrollable-content'}
          style={{
            position: 'absolute',
            top: `${popupPosition.y}px`,
            left: `${popupPosition.x}px`,
            // transform: 'translate(-50%, -100%)',
            backgroundColor: 'rgba(0, 0, 50, 0.85)',
            color: 'white',
            padding: '12px',
            borderRadius: '8px',
            zIndex: 1000,
            boxShadow: '0 2px 10px rgba(0,0,0,0.3)',
            maxWidth: '300px',
            pointerEvents: 'none',
            maxHeight: 'calc(113px + 63vh)',
            overflow: 'scroll',
          }}
        >
          <div
            style={{
              display: 'flex',
              justifyContent: 'space-between',
              alignItems: 'center',
              cursor: 'move',
              userSelect: 'none',
              pointerEvents: 'auto'
            }}
            onMouseDown={(e) => {
              setIsDragging(true)
              setDragOffset({
                x: e.clientX - popupPosition.x,
                y: e.clientY - popupPosition.y,
              })
            }}
          >
            <strong>Selected Feature</strong>
            <button
              onClick={() => {
                setRenderedFeature(null)
                setSelectedCellId(null)
                setSelectedCellLevel(null)
              }}
              style={{
                background: 'transparent',
                border: 'none',
                color: 'white',
                fontSize: '16px',
                cursor: 'pointer',
                pointerEvents: 'auto'
              }}
              title="Закрыть"
            >
              ×
            </button>
          </div>
          <Divider
            style={{
              backgroundColor: 'white',
            }}
          />
          {typeof renderedFeature.getProperty === 'function' && (
            <>
              {/*FIXME Level*/}
              <div style={{marginTop: '8px'}}>
                <div
                  key={renderedFeature.getProperty('level')?.toString()}
                  style={{
                    marginBottom: '4px',
                    wordBreak: 'break-word',
                    whiteSpace: 'pre-wrap',
                    pointerEvents: 'auto'
                  }}
                >
                  <strong>Level:</strong> {Math.floor(renderedFeature.getProperty('level')?.toString())}{' '}
                  {/*<button*/}
                  {/*  style={{*/}
                  {/*    marginLeft: '6px',*/}
                  {/*    cursor: 'pointer',*/}
                  {/*    backgroundColor: 'transparent',*/}
                  {/*    border: '1px solid white',*/}
                  {/*    color: 'white',*/}
                  {/*    fontSize: '12px',*/}
                  {/*    padding: '2px 6px',*/}
                  {/*    borderRadius: '4px'*/}
                  {/*  }}*/}
                  {/*  onClick={(e) => {*/}
                  {/*    e.stopPropagation()*/}
                  {/*    console.log('[COPY]', renderedFeature.getProperty('level')?.toString())*/}
                  {/*    navigator.clipboard.writeText(renderedFeature.getProperty('level')?.toString())*/}
                  {/*    setCopiedKey('level')*/}
                  {/*    setTimeout(() => setCopiedKey(null), 1500)*/}
                  {/*  }}*/}
                  {/*  title="Скопировать"*/}
                  {/*>*/}
                  {/*  {copiedKey === name ? 'Copied!' : 'Copy'}*/}
                  {/*</button>*/}
                </div>
              </div>

              {/*FIXME Cell ID*/}
              <div style={{marginTop: '8px'}}>
                <div
                  key={renderedFeature.getProperty('cell_id')?.toString()}
                  style={{
                    marginBottom: '4px',
                    wordBreak: 'break-word',
                    whiteSpace: 'pre-wrap',
                    pointerEvents: 'auto'
                  }}
                >
                  <strong>Cell ID:</strong> {renderedFeature.getProperty('cell_id')?.toString()}{' '}
                  <button
                    style={{
                      marginLeft: '6px',
                      cursor: 'pointer',
                      backgroundColor: 'transparent',
                      border: '1px solid white',
                      color: 'white',
                      fontSize: '12px',
                      padding: '2px 6px',
                      borderRadius: '4px'
                    }}
                    onClick={(e) => {
                      e.stopPropagation()
                      console.log('[COPY]', renderedFeature.getProperty('cell_id')?.toString())
                      navigator.clipboard.writeText(renderedFeature.getProperty('cell_id')?.toString())
                      setCopiedKey('cell_id')
                      setTimeout(() => setCopiedKey(null), 1500)
                    }}
                    title="Скопировать"
                  >
                    {copiedKey === name ? 'Copied!' : 'Copy'}
                  </button>
                </div>
              </div>

              {/*FIXME Parent ID*/}
              <div style={{marginTop: '8px'}}>
                <div
                  key={renderedFeature.getProperty('parent_id')?.toString()}
                  style={{
                    marginBottom: '4px',
                    wordBreak: 'break-word',
                    whiteSpace: 'pre-wrap',
                    pointerEvents: 'auto'
                  }}
                >
                  <strong>Parent ID:</strong> {renderedFeature.getProperty('parent_id')?.toString()}{' '}
                  <button
                    style={{
                      marginLeft: '6px',
                      cursor: 'pointer',
                      backgroundColor: 'transparent',
                      border: '1px solid white',
                      color: 'white',
                      fontSize: '12px',
                      padding: '2px 6px',
                      borderRadius: '4px'
                    }}
                    onClick={(e) => {
                      e.stopPropagation()
                      console.log('[COPY]', renderedFeature.getProperty('parent_id')?.toString())
                      navigator.clipboard.writeText(renderedFeature.getProperty('parent_id')?.toString())
                      setCopiedKey('parent_id')
                      setTimeout(() => setCopiedKey(null), 1500)
                    }}
                    title="Скопировать"
                  >
                    {copiedKey === name ? 'Copied!' : 'Copy'}
                  </button>
                </div>
              </div>

              {/*FIXME HEIGHT*/}
              <div style={{marginTop: '8px'}}>
                <div
                  key={renderedFeature.getProperty('Height')?.toString()}
                  style={{
                    marginBottom: '4px',
                    wordBreak: 'break-word',
                    whiteSpace: 'pre-wrap',
                    pointerEvents: 'auto'
                  }}
                >
                  <strong>Height:</strong> {Math.floor(renderedFeature.getProperty('Height')?.toString())}{' '}
                  <button
                    style={{
                      marginLeft: '6px',
                      cursor: 'pointer',
                      backgroundColor: 'transparent',
                      border: '1px solid white',
                      color: 'white',
                      fontSize: '12px',
                      padding: '2px 6px',
                      borderRadius: '4px'
                    }}
                    onClick={(e) => {
                      e.stopPropagation()
                      console.log('[COPY]', renderedFeature.getProperty('Height')?.toString())
                      navigator.clipboard.writeText(renderedFeature.getProperty('Height')?.toString())
                      setCopiedKey('Height')
                      setTimeout(() => setCopiedKey(null), 1500)
                    }}
                    title="Скопировать"
                  >
                    {copiedKey === name ? 'Copied!' : 'Copy'}
                  </button>
                </div>
              </div>

              {/*FIXME Latitude*/}
              <div style={{marginTop: '8px'}}>
                <div
                  key={renderedFeature.getProperty('Latitude')?.toString()}
                  style={{
                    marginBottom: '4px',
                    wordBreak: 'break-word',
                    whiteSpace: 'pre-wrap',
                    pointerEvents: 'auto'
                  }}
                >
                  <strong>Latitude:</strong> {renderedFeature.getProperty('Latitude')?.toFixed(5)}{' '}
                  <button
                    style={{
                      marginLeft: '6px',
                      cursor: 'pointer',
                      backgroundColor: 'transparent',
                      border: '1px solid white',
                      color: 'white',
                      fontSize: '12px',
                      padding: '2px 6px',
                      borderRadius: '4px'
                    }}
                    onClick={(e) => {
                      e.stopPropagation()
                      console.log('[COPY]', renderedFeature.getProperty('Latitude')?.toString())
                      navigator.clipboard.writeText(renderedFeature.getProperty('Latitude')?.toString())
                      setCopiedKey('Latitude')
                      setTimeout(() => setCopiedKey(null), 1500)
                    }}
                    title="Скопировать"
                  >
                    {copiedKey === name ? 'Copied!' : 'Copy'}
                  </button>
                </div>
              </div>

              {/*FIXME Longitude*/}
              <div style={{marginTop: '8px'}}>
                <div
                  key={renderedFeature.getProperty('Longitude')?.toString()}
                  style={{
                    marginBottom: '4px',
                    wordBreak: 'break-word',
                    whiteSpace: 'pre-wrap',
                    pointerEvents: 'auto'
                  }}
                >
                  <strong>Longitude:</strong> {renderedFeature.getProperty('Longitude')?.toFixed(5)}{' '}
                  <button
                    style={{
                      marginLeft: '6px',
                      cursor: 'pointer',
                      backgroundColor: 'transparent',
                      border: '1px solid white',
                      color: 'white',
                      fontSize: '12px',
                      padding: '2px 6px',
                      borderRadius: '4px'
                    }}
                    onClick={(e) => {
                      e.stopPropagation()
                      console.log('[COPY]', renderedFeature.getProperty('Longitude')?.toString())
                      navigator.clipboard.writeText(renderedFeature.getProperty('Longitude')?.toString())
                      setCopiedKey('Longitude')
                      setTimeout(() => setCopiedKey(null), 1500)
                    }}
                    title="Скопировать"
                  >
                    {copiedKey === name ? 'Copied!' : 'Copy'}
                  </button>
                </div>
              </div>

            </>
          )}
          <Divider
            style={{
              backgroundColor: 'white',
            }}
          />
          <strong> Percent of filling with:</strong>
          {typeof renderedFeature.getProperty === 'function' && (
            <>
              {/*FIXME Buildings*/}
              <div style={{marginTop: '8px'}}>
                <div
                  key={renderedFeature.getProperty('pc_build3d')?.toString()}
                  style={{
                    marginBottom: '4px',
                    wordBreak: 'break-word',
                    whiteSpace: 'pre-wrap',
                    pointerEvents: 'auto'
                  }}
                >
                  <strong>Buildings:</strong> {formatDecimelsBGRW(renderedFeature.getProperty('pc_build3d')) + ' ' + '%'}
                </div>
              </div>

              {/*FIXME Greenary*/}
              <div style={{marginTop: '8px'}}>
                <div
                  key={renderedFeature.getProperty('pc_green3d')?.toString()}
                  style={{
                    marginBottom: '4px',
                    wordBreak: 'break-word',
                    whiteSpace: 'pre-wrap',
                    pointerEvents: 'auto'
                  }}
                >
                  <strong>Greenary:</strong>{formatDecimelsBGRW(renderedFeature.getProperty('pc_green3d')) + ' ' + '%'}
                </div>
              </div>

              {/*FIXME Roads*/}
              <div style={{marginTop: '8px'}}>
                <div
                  key={renderedFeature.getProperty('pc_roads_3d')?.toString()}
                  style={{
                    marginBottom: '4px',
                    wordBreak: 'break-word',
                    whiteSpace: 'pre-wrap',
                    pointerEvents: 'auto'
                  }}
                >
                  <strong>Roads:</strong>{formatDecimelsBGRW(renderedFeature.getProperty('pc_roads_3d')) + ' ' + '%'}
                </div>
              </div>

              {/*FIXME Water*/}
              <div style={{marginTop: '8px'}}>
                <div
                  key={renderedFeature.getProperty('pc_water3d')?.toString()}
                  style={{
                    marginBottom: '4px',
                    wordBreak: 'break-word',
                    whiteSpace: 'pre-wrap',
                    pointerEvents: 'auto'
                  }}
                >
                  <strong>Water:</strong>{formatDecimelsBGRW(renderedFeature.getProperty('pc_water3d')) + ' ' + '%'}
                </div>
              </div>


            </>
          )}
          <Divider
            style={{
              backgroundColor: 'white',
            }}
          />
          <strong> Cell characteristics:</strong>
          {typeof renderedFeature.getProperty === 'function' && (
            <>
              {/*FIXME Land surface temperature*/}
              <div style={{marginTop: '8px'}}>
                <div
                  key={renderedFeature.getProperty('LST')?.toString()}
                  style={{
                    marginBottom: '4px',
                    wordBreak: 'break-word',
                    whiteSpace: 'pre-wrap',
                    pointerEvents: 'auto'
                  }}
                >
                  <strong>Land surface temperature:</strong>{formatDecimelsLNAT(renderedFeature.getProperty('LST')) + ' ' + '°C'}
                </div>
              </div>

              {/*FIXME Normalized Difference Vegetation Index*/}
              <div style={{marginTop: '8px'}}>
                <div
                  key={renderedFeature.getProperty('NDVI')?.toString()}
                  style={{
                    marginBottom: '4px',
                    wordBreak: 'break-word',
                    whiteSpace: 'pre-wrap',
                    pointerEvents: 'auto'
                  }}
                >
                  <strong>Normalized Difference Vegetation Index:</strong>{formatDecimelsLNAT(renderedFeature.getProperty('NDVI')) + ' '}
                </div>
              </div>

              {/*FIXME Air Quality Index (AQI)*/}
              <div style={{marginTop: '8px'}}>
                <div
                  key={renderedFeature.getProperty('AQI')?.toString()}
                  style={{
                    marginBottom: '4px',
                    wordBreak: 'break-word',
                    whiteSpace: 'pre-wrap',
                    pointerEvents: 'auto'
                  }}
                >
                  <strong>Air Quality Index (AQI):</strong>{formatDecimelsLNAT(renderedFeature.getProperty('AQI')) + ' '}
                </div>
              </div>

              {/*FIXME Traffic jam index*/}
              <div style={{marginTop: '8px'}}>
                <div
                  key={renderedFeature.getProperty('TJ')?.toString()}
                  style={{
                    marginBottom: '4px',
                    wordBreak: 'break-word',
                    whiteSpace: 'pre-wrap',
                    pointerEvents: 'auto'
                  }}
                >
                  <strong>Traffic jam index:</strong>{formatDecimelsLNAT(renderedFeature.getProperty('TJ')) + ' '}
                </div>
              </div>
            </>
          )}
          <Divider
            style={{
              backgroundColor: 'white',
            }}
          />
          {selectedLevel === 5 ?
            ''
            :
            <button
              onClick={() => {
                const viewer = viewerRef.current
                if (!renderedFeature) return
                const parentId = renderedFeature.getProperty('parent_id')
                const level = parseInt(renderedFeature.getProperty('level'))

                if (!parentId || isNaN(level)) {
                  console.warn('Нет данных о родителе или уровне.')
                  return
                }

                const newLevel = level + 1

                // Сброс текущего
                if (selectedFeatureRef.current && selectedFeatureRef.current.color) {
                  try {
                    selectedFeatureRef.current.color = Color.WHITE
                  } catch (e) {
                    console.warn('Не удалось сбросить цвет предыдущей фичи:', e)
                  }
                  selectedFeatureRef.current = null
                  setRenderedFeature(null)
                }
                flyToFeature(viewer, renderedFeature, selectedLevel, newLevel)
                setSelectedLevel(newLevel)
                setFilterCellId(parentId)
                setShowParentFilter(true)
                setShowChildrenFilter(false)
                loadTileset(newLevel, parentId)
              }}
              style={{
                marginTop: '10px',
                backgroundColor: '#0066cc',
                border: 'none',
                color: 'white',
                padding: '6px 12px',
                borderRadius: '4px',
                cursor: 'pointer',
                pointerEvents: 'auto'
              }}
            >
              Show parent items
            </button>
          }
          {/*<button*/}
          {/*  onClick={async () => {*/}
          {/*    setFilterCellId(null)*/}
          {/*    setShowParentFilter(false)*/}
          {/*    setShowChildrenFilter(false)*/}

          {/*    if (selectedCellId && selectedCellLevel) {*/}
          {/*      // Сброс текущей фичи*/}
          {/*      if (selectedFeatureRef.current && selectedFeatureRef.current.color) {*/}
          {/*        try {*/}
          {/*          selectedFeatureRef.current.color = Color.WHITE*/}
          {/*        } catch (e) {*/}
          {/*          console.warn('Не удалось сбросить цвет предыдущей фичи:', e)*/}
          {/*        }*/}
          {/*        selectedFeatureRef.current = null*/}
          {/*        setRenderedFeature(null)*/}
          {/*      }*/}

          {/*      const newLevel = parseInt(selectedCellLevel)*/}
          {/*      setSelectedLevel(newLevel)*/}
          {/*      console.log('newLevel: ', newLevel)*/}
          {/*      await loadTileset(newLevel)*/}
          {/*      // setTimeout(() => {*/}
          {/*      //   handleSearch(selectedCellId)*/}
          {/*      // }, 500)*/}
          {/*    }*/}
          {/*  }}*/}
          {/*  disabled={renderedFeature?.getProperty('cell_id') === selectedCellId}*/}
          {/*  style={{*/}
          {/*    marginTop: '8px',*/}
          {/*    backgroundColor: renderedFeature?.getProperty('cell_id') === selectedCellId ? '#999' : '#00aa88',*/}
          {/*    border: 'none',*/}
          {/*    color: 'white',*/}
          {/*    padding: '6px 12px',*/}
          {/*    borderRadius: '4px',*/}
          {/*    cursor: renderedFeature?.getProperty('cell_id') === selectedCellId ? 'default' : 'pointer',*/}
          {/*    pointerEvents: 'auto',*/}
          {/*    opacity: renderedFeature?.getProperty('cell_id') === selectedCellId ? 0.6 : 1*/}
          {/*  }}*/}
          {/*>*/}
          {/*  Back to first one item*/}
          {/*</button>*/}
          {selectedLevel === 1 || selectedLevel === 2 ?
            ''
            :
            <button
              onClick={() => {
                const viewer = viewerRef.current
                if (!renderedFeature || !selectedCellId) return

                const level = parseInt(renderedFeature.getProperty('level'))
                const current_cell_id = renderedFeature.getProperty('cell_id')
                if (isNaN(level) || level <= 1) return

                const newLevel = level - 1

                // Сброс текущей фичи
                if (selectedFeatureRef.current && selectedFeatureRef.current.color) {
                  try {
                    selectedFeatureRef.current.color = Color.WHITE
                  } catch (e) {
                    console.warn('Не удалось сбросить цвет предыдущей фичи:', e)
                  }
                  selectedFeatureRef.current = null
                  setRenderedFeature(null)
                }

                setSelectedLevel(newLevel)
                console.log('setSelectedLevel newLevel: ', newLevel)

                console.log('::New ChildrenParentFlow:: - Click  Show children items, filterCellId: - ', current_cell_id)
                flyToFeature(viewer, renderedFeature, selectedLevel, newLevel)
                setSelectedLevel(newLevel)
                setFilterCellId(current_cell_id)
                setShowParentFilter(false)
                setShowChildrenFilter(true)
                loadTileset(newLevel, current_cell_id)
              }}
              style={{
                marginTop: '8px',
                backgroundColor: '#0066cc',
                border: 'none',
                color: 'white',
                padding: '6px 12px',
                borderRadius: '4px',
                cursor: 'pointer',
                pointerEvents: 'auto'
              }}
            >
              Show children items
            </button>
          }
        </div>
      )}
    </>
  )
}

{/*{renderedFeature.getPropertyIds?.().map((name) => {*/}
{/*  const value = renderedFeature.getProperty(name)?.toString()*/}

{/*  return (*/}
{/*    <div*/}
{/*      key={name}*/}
{/*      style={{*/}
{/*        marginBottom: '4px',*/}
{/*        wordBreak: 'break-word',*/}
{/*        whiteSpace: 'pre-wrap',*/}
{/*        pointerEvents: 'auto'*/}
{/*      }}*/}
{/*    >*/}
{/*      <strong>{name}:</strong> {value}{' '}*/}
{/*      <button*/}
{/*        style={{*/}
{/*          marginLeft: '6px',*/}
{/*          cursor: 'pointer',*/}
{/*          backgroundColor: 'transparent',*/}
{/*          border: '1px solid white',*/}
{/*          color: 'white',*/}
{/*          fontSize: '12px',*/}
{/*          padding: '2px 6px',*/}
{/*          borderRadius: '4px'*/}
{/*        }}*/}
{/*        onClick={(e) => {*/}
{/*          e.stopPropagation()*/}
{/*          console.log('[COPY]', value)*/}
{/*          navigator.clipboard.writeText(value)*/}
{/*          setCopiedKey(name)*/}
{/*          setTimeout(() => setCopiedKey(null), 1500)*/}
{/*        }}*/}
{/*        title="Скопировать"*/}
{/*      >*/}
{/*        {copiedKey === name ? 'Copied!' : 'Copy'}*/}
{/*      </button>*/}
{/*    </div>*/}
{/*  )*/}
{/*})}*/}

export default CesiumMap